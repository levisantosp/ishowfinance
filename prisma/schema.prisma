generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model User {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  email         String         @unique
  emailVerified Boolean        @default(false)
  name          String
  lastName      String?
  accounts      Account[]
  sessions      Session[]
  updatedAt     DateTime       @updatedAt
  image         String?
  orgs          Organization[]
  memberIn      Member[]

  @@map("user")
}

model Organization {
  id         String     @id @default(uuid())
  name       String
  email      String
  currency   Currency   @default(BRL)
  tokens     Token[]
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  members    Member[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  invite     Invite[]
  categories Category[]

  @@index([userId])
  @@map("organization")
}

model Category {
  id             String        @id @default(uuid())
  name           String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  transactions   Transaction[]

  @@index([organizationId])
  @@map("category")
}

model Transaction {
  id          String          @id @default(uuid())
  category    Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String
  type        TransactionType
  amount      BigInt
  description String?         @db.VarChar(100)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([categoryId, type])
  @@map("transaction")
}

model Token {
  id             String       @id @default(uuid())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  type           TokenType

  @@unique([organizationId, type])
  @@map("token")
}

model Invite {
  id             String       @id @default(cuid())
  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  expiresAt      DateTime

  @@index([organizationId])
  @@map("invite")
}

model Member {
  id             String       @id @default(cuid())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  createdAt      DateTime     @default(now())
  role           Role         @default(ADMIN)
  updatedAt      DateTime     @updatedAt

  @@index([organizationId, userId])
  @@map("member")
}

model Account {
  id                    String    @id @default(cuid())
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String
  provider              String?
  providerAccountId     String?
  accessToken           String?
  refreshToken          String?
  expiresAt             DateTime?
  accountId             String
  providerId            String
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("account")
}

model Session {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?

  @@index([userId, token])
  @@map("session")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@map("verification")
}

enum Role {
  OWNER
  ADMIN
}

enum TokenType {
  TEST
  PROD
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum Currency {
  USD
  BRL
  EUR
}
